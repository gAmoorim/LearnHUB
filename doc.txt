DocumentaÃ§Ã£o de Rotas e Controllers

ðŸ”¹ UsuÃ¡rios

controllerCadastrarUsuario (POST /usuarios)
    Âº Body: nome, email, senha, tipo (aluno ou instrutor)
    Âº Valida campos obrigatÃ³rios e formato do email
    Âº Senha com pelo menos 6 caracteres
    Âº Verifica se email jÃ¡ estÃ¡ cadastrado
    Âº Criptografa senha com bcrypt
    Âº Cria usuÃ¡rio no banco
    Âº Retorna: 201 Created + (id, nome, email, tipo)

controllerLoginUsuario (POST /login)
    Âº Body: email, senha
    Âº Valida campos obrigatÃ³rios
    Âº Verifica credenciais (bcrypt compare)
    Âº Gera token JWT com id e tipo de usuÃ¡rio
    Âº Retorna: 200 OK + token JWT

--RESTRINGIR A ADMIN--

controllerListarUsuarios (GET /usuarios)
    Âº (Restrito a admin futuramente)
    Âº Lista todos os usuÃ¡rios do banco
    Âº Retorna: 200 OK + array de usuÃ¡rios

controllerObterUsuario (GET /usuarios/:id)
    Âº Busca usuario por ID
    Âº busca dados do usuÃ¡rio
    Âº retorna: 200 OK + dados do usuÃ¡rio

controllerDeletarUsuario (DELETE /usuarios/:id)
    Âº confirmar existÃªncia do usuÃ¡rio
    Âº deleta usuÃ¡rio e dados vinculados
    Âº retorna: 204 No Content

    
ðŸ”¹ Cursos

controllerCriarCurso (POST /cursos) [instrutor]
    Âº Body: tÃ­tulo, descriÃ§Ã£o, preco (opcional)
    Âº Valida campos obrigatÃ³rios
    Âº Associa instrutor pelo token JWT (receber o id do instrutor_id ao logar)
    Âº Verificar se o usuario Ã© instrutor
    Âº Cria curso no banco
    Âº Retorna: 201 Created + curso

controllerListarCursos (GET /cursos)
    Âº Pode receber query params (categoria, instrutor, preco)
    Âº Retorna lista de cursos disponÃ­veis
    Âº Retorna: 200 OK + array de cursos

controllerObterCurso (GET /cursos/:id)
    Âº Busca curso por ID
    Âº Inclui mÃ³dulos, aulas e avaliaÃ§Ãµes
    Âº Retorna: 200 OK + curso completo

controllerAtualizarCurso (PUT /cursos/:id) [instrutor dono]
    Âº Body: tÃ­tulo, descriÃ§Ã£o, preco
    Âº Valida se curso pertence ao instrutor autenticado
    Âº Atualiza dados no banco
    Âº Retorna: 200 OK + curso atualizado

controllerDeletarCurso (DELETE /cursos/:id) [instrutor dono]
    Âº Valida permissÃ£o do instrutor
    Âº Remove curso e dependÃªncias (mÃ³dulos, aulas)
    Âº Retorna: 204 No Content

ðŸ”¹ MÃ³dulos

controllerCriarModulo (POST /modulos/:cursoId) [instrutor dono]
    Âº Body: tÃ­tulo
    Âº Valida se curso existe e pertence ao instrutor
    Âº Cria mÃ³dulo vinculado ao curso
    Âº Retorna: 201 Created + mÃ³dulo

controllerListarModulos (GET /cursos/:cursoId/modulos)
    Âº Busca mÃ³dulos do curso
    Âº Inclui aulas de cada mÃ³dulo
    Âº Retorna: 200 OK + array de mÃ³dulos

ðŸ”¹ Aulas

controllerCriarAula (POST /modulos/:moduloId/aulas) [instrutor dono]
    Âº Body: tÃ­tulo, conteÃºdo (link/texto/pdf), tipo
    Âº Valida dados obrigatÃ³rios
    Âº Cria aula vinculada ao mÃ³dulo
    Âº Retorna: 201 Created + aula

controllerListarAulas (GET /modulos/:moduloId/aulas)
    Âº Lista aulas do mÃ³dulo
    Âº Retorna: 200 OK + array de aulas

ðŸ”¹ InscriÃ§Ãµes

controllerInscreverCurso (POST /cursos/:id/inscrever) [aluno]
Âº Valida se curso existe
Âº Cria inscriÃ§Ã£o se ainda nÃ£o existir
Âº Retorna: 201 Created + inscriÃ§Ã£o

controllerListarInscricoes (GET /meus-cursos) [aluno]
Âº Busca cursos em que o aluno estÃ¡ inscrito
Âº Retorna: 200 OK + array de cursos do aluno

ðŸ”¹ Progresso

controllerMarcarAulaConcluida (POST /aulas/:id/concluir) [aluno]
Âº Valida se aluno estÃ¡ inscrito no curso
Âº Marca aula como concluÃ­da no progresso
Âº Retorna: 200 OK + confirmaÃ§Ã£o

controllerObterProgressoCurso (GET /cursos/:id/progresso) [aluno]
Âº Calcula % de progresso do aluno no curso
Âº Retorna: 200 OK + { percentual: X }

ðŸ”¹ AvaliaÃ§Ãµes

controllerAvaliarCurso (POST /cursos/:id/avaliar) [aluno inscrito]
Âº Body: nota (1â€“5), comentÃ¡rio
Âº Valida se aluno estÃ¡ inscrito no curso
Âº Cria avaliaÃ§Ã£o no banco
Âº Retorna: 201 Created + avaliaÃ§Ã£o

controllerListarAvaliacoes (GET /cursos/:id/avaliacoes)
Âº Busca todas as avaliaÃ§Ãµes de um curso
Âº Retorna: 200 OK + array de avaliaÃ§Ãµes